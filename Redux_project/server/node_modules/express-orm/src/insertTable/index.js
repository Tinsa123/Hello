const crypto = require('crypto')

const valueChecker = (value, schouldBe) => {
    if(schouldBe == String){
        if(typeof(value) == 'string'){
            return true
        }
        return false
    }
    if(schouldBe == Number){
        if(typeof(value) == 'number'){
            return true
        }
        return false
    }
    if(schouldBe == Boolean){
        if(typeof(value) == 'boolean'){
            return true
        }
        return false
    }
    if(schouldBe == Date){
        let dateWrapper = new Date(value);
        return !isNaN(dateWrapper.getDate());
    }
}

const Insert = (table, schema, values) => {
    required = []
    for(let i in values){
        if(valueChecker(values[i], schema[i].type)){
            
        }
        else{
            throw values[i]+" at the field "+i+" is not "+schema[i].type
        }
    }

    for(let i in schema){
        if(schema[i].default){
            if(!values[i]){
                values[i] = schema[i].default
            }
        }
    }

    for(let i in schema){
        if(schema[i].length){
            if(values[i].length > schema[i].length){
                throw "value "+values[i]+" at "+i+" is too long; max: "+schema[i].length
            }
        }
        else{
            if(typeof(values[i]) == 'string'){
                if(values[i].length > 255){
                    throw "value "+values[i]+" at "+i+" is too long; max: 255"
                }
            }
        }
        if(schema[i].notNull){
            required.push(i)
        }
    }


    for(let i in required){
        if(values[required[i]]){

        }
        else{
            throw "required value "+required[i]+" cannot be null"
        }
    }

    let sql = "INSERT INTO "+table+" ( "
    let valuelist = []
    let counter = 0
    for(let i in schema){
        counter ++
        if(counter == Object.keys(schema).length){
            sql += i+" ) VALUES ( "
        }
        else{
            sql += i+", "
        }
        if(values[i]){
            if(schema[i].cypher){
                values[i] = crypto.createHash(schema[i].cypher).update(values[i]).digest('base64');
            }
            valuelist.push(values[i]) 
        }
        else{
            valuelist.push(null)
        }
    }

    for(let i in valuelist){
        if(i == valuelist.length-1){
            sql += "? );"
        }
        else{
            sql += "?, "
        }
    }

    return{
        sql: sql,
        valuelist: valuelist
    }
    
}

const init = (table, schema, value) => {
    try {
        return {
            status: true,
            data: Insert(table, schema, value)
        }
        
    }
    catch(err){
        return {
            status: false,
            data: err
        }
    }
}

/*
Insert('testtable', {
    name: { type: String, notNull: true },
    username: {Â type: String, notNull: true },
    email: { type: String, notNull: true },
    password: { type: String, notNull: true, cypher: 'sha256' }
}, {
    name: "name",
    username: "username",
    email: "email",
    password: "alexander2003"
})
*/

module.exports = init
